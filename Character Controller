using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{

    public float moveSpeed;
    //public rididbody theRB
    public float jumpForce;
    public CharacterController controller;

    private Vector3 moveDirection;
    public float gravityScale;

    public Animator anim;
    public Transform pivot;
    public float rotateSpeed;

    public GameObject playerModel;
    //use for initialization

    // Start is called before the first frame update
    void Start()
    {
        controller = GetComponent<CharacterController>();
    }

    // Update is called once per frame (remember void lateupdate for cameras)
    void Update()
    {
        //theRB.velocity = new vector3 (Input.Getaxis("Horizontal") = moveSpeed, theRB.velocity.y, Input.Getaxis("Vertical") = moveSpeed);

        // if (Input.GetButtonDown("Jump"))
        // {
        //  theRB.velocity = new Vector3(theRB.velocity.x, jumpForce, theRB.velocity.z); 
        // }

        //moveDirection = new Vector3 (Input.GetAxis("Horizontal") * moveSpeed, moveDirection.y , Input.GetAxis("Vertical") * moveSpeed);
        float yStore = moveDirection.y;
        moveDirection = (transform.forward * Input.GetAxis("Vertical") * moveSpeed) + (transform.right * Input.GetAxis("Horizontal") * moveSpeed);
        moveDirection = moveDirection.normalized * moveSpeed;
        moveDirection.y = yStore;

        if (controller.isGrounded)
        {
            moveDirection.y = 0f;
            if (Input.GetButtonDown("Jump"))
            {
                moveDirection.y = jumpForce;
            }
        }
        moveDirection.y = moveDirection.y + (Physics.gravity.y * gravityScale);
        controller.Move(moveDirection * Time.deltaTime);

        //move the player in different directions based on camera look direction
        if (Input.GetAxis("Horizontal") != 0 || Input.GetAxis("Vertical") != 0)
        {
            transform.rotation = Quaternion.Euler(0f, pivot.rotation.eulerAngles.y, 0f);
            Quaternion newRotation = Quaternion.LookRotation(new Vector3(moveDirection.x, 0f, moveDirection.z));
            playerModel.transform.rotation = Quaternion.Slerp(playerModel.transform.rotation, newRotation, rotateSpeed * Time.deltaTime);
        }

        anim.SetBool("isGrounded", controller.isGrounded);
        anim.SetFloat("speed", (Mathf.Abs(Input.GetAxis("Vertical")) + Mathf.Abs(Input.GetAxis("Horizontal"))));
        anim.SetFloat("Input y", moveDirection.y);

        //ATTACK
        if (controller.isGrounded)
        {
            if (Input.GetButtonDown("Attack"))
            {
                Attacking();
            }

        }
        void Attacking()
        {
            StartCoroutine(AttackRoutine());
        }

        IEnumerator AttackRoutine()
        {
            anim.SetInteger("attack_2", 1);
            yield return new WaitForSeconds(0.5f);
            anim.SetInteger("attack_2", 0);

        }
    }
}
